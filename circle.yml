defaults:

  update-submodules: &update-submodules
    run:
      name: "Update git submodules"
      command: git submodule update --init --depth 20

  upload-hunter-cache: &upload-hunter-cache
    run:
      name: "Upload Hunter cache"
      command: |  # Upload Hunter cache if not PR build.
        if [ ! "$CIRCLE_PR_NUMBER" ]; then
          cmake --build build --target hunter_upload_cache
        fi

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  configure: &configure
    run:
      name: "Configure"
      command: |
        mkdir -p build && cd build
        cmake .. -G "$GENERATOR" -DSANITIZE=address -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCOVERAGE=ON $CMAKE_OPTIONS

  build: &build
    run:
      name: "Build"
      command: cmake --build build -- -j $BUILD_PARALLEL_JOBS

  test: &test
    run:
      name: "Test"
      pwd: build
      command: |
        if [ $(uname) = Linux ]; then
          export TMPDIR=/dev/shm
        fi
        export ETHEREUM_TEST_PATH=~/project/test/jsontests

        # If the DAG file does not exist, we have to run a single test with mining
        # to create it before we can run tests in parallel.
        if [ ! -f ~/.ethash/full-R23-0000000000000000 ]; then
          test/testeth -t BlockChainSuite/updateStats
        fi

        valgrind ctest --output-on-failure -j $TEST_PARALLEL_JOBS

  store-eth: &store-eth
    store_artifacts:
      path: build/eth/eth
      destination: eth

  save-deps-cache: &save-deps-cache
    cache-save:
      name: "Save dependencies cache"
      key: &deps-cache-key deps-2-{{arch}}-{{checksum "compiler.version"}}-{{checksum "cmake/ProjectJsonRpcCpp.cmake"}}
      paths:
        - build/deps

  restore-deps-cache: &restore-deps-cache
    cache-restore:
      name: "Restore dependencies cache"
      key: *deps-cache-key

  save-ethash-dag: &save-ethash-dag
    cache-save:
      name: "Save Ethash DAG file"
      key: &ethash-dag-key ethash-dag0-{{arch}}
      paths:
        - ~/.ethash/full-R23-0000000000000000

  restore-ethash-dag: &restore-ethash-dag
    cache-restore:
      name: "Restore Ethash DAG file"
      key: *ethash-dag-key

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      pwd: build
      command: codecov

  linux-steps: &linux-steps
    - checkout
    - *update-submodules
    - *environment-info
    - *restore-deps-cache
    - *configure
    - *upload-hunter-cache
    - *build
    - *save-deps-cache
    - *store-eth
    - *restore-ethash-dag
    - *test
    - *save-ethash-dag
    - *upload-coverage-data


version: 2
jobs:

  macOS-XCode9:
    environment:
      - CXX: clang++
      - GENERATOR: Ninja
      - BUILD_PARALLEL_JOBS: 8
      - TEST_PARALLEL_JOBS: 8
    macos:
      xcode: "9.0"
    steps:
      - checkout
      - *update-submodules
      - *environment-info
      - run:
          name: "Install macOS dependencies"
          command: |
            pip install -q requests codecov &
            HOMEBREW_NO_AUTO_UPDATE=1 brew install -q cmake ninja leveldb libmicrohttpd &
            wait
      - *restore-deps-cache
      - *configure
      - *upload-hunter-cache
      - *build
      - *save-deps-cache
      - *store-eth
      - *restore-ethash-dag
      - *test
      - *save-ethash-dag
      - *upload-coverage-data

# TODO: Run GCC6 build only in develop branch.
# TODO: Enabled nightly builds and add more configs.
# TODO: Separate builds from testing jobs.
workflows:
  version: 2
  cpp-ethereum:
    jobs:
      - macOS-XCode9
